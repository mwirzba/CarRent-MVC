// <auto-generated />
using System;
using CarRent.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRent.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200109225925_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRent.Models.CarModels.Car", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("CarCategoryId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CarClassId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CarFuelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<short>("RentPrice")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("CarClassId");

                    b.HasIndex("CarFuelTypeId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Brand = "Kia",
                            CarCategoryId = (byte)1,
                            CarClassId = (byte)1,
                            CarFuelTypeId = (byte)1,
                            ImageName = "venga.png",
                            Model = "Venga",
                            NumberOfSeats = 5,
                            RentPrice = (short)120
                        },
                        new
                        {
                            Id = (short)2,
                            Brand = "Kia",
                            CarCategoryId = (byte)1,
                            CarClassId = (byte)2,
                            CarFuelTypeId = (byte)2,
                            ImageName = "sorento.png",
                            Model = "Sorento",
                            NumberOfSeats = 5,
                            RentPrice = (short)140
                        },
                        new
                        {
                            Id = (short)3,
                            Brand = "Seat ",
                            CarCategoryId = (byte)3,
                            CarClassId = (byte)4,
                            CarFuelTypeId = (byte)4,
                            ImageName = "ibiza.png",
                            Model = "Ibiza",
                            NumberOfSeats = 6,
                            RentPrice = (short)84
                        },
                        new
                        {
                            Id = (short)4,
                            Brand = "Suzuki",
                            CarCategoryId = (byte)1,
                            CarClassId = (byte)1,
                            CarFuelTypeId = (byte)4,
                            ImageName = "Celerio.png",
                            Model = "Celerio",
                            NumberOfSeats = 5,
                            RentPrice = (short)150
                        },
                        new
                        {
                            Id = (short)5,
                            Brand = "Toyota ",
                            CarCategoryId = (byte)1,
                            CarClassId = (byte)1,
                            CarFuelTypeId = (byte)3,
                            ImageName = "Yaris.png",
                            Model = "Yaris",
                            NumberOfSeats = 4,
                            RentPrice = (short)170
                        },
                        new
                        {
                            Id = (short)6,
                            Brand = "Opel ",
                            CarCategoryId = (byte)3,
                            CarClassId = (byte)1,
                            CarFuelTypeId = (byte)2,
                            ImageName = "Zafira.png",
                            Model = "Zafira",
                            NumberOfSeats = 6,
                            RentPrice = (short)90
                        },
                        new
                        {
                            Id = (short)7,
                            Brand = "Opel ",
                            CarCategoryId = (byte)4,
                            CarClassId = (byte)1,
                            CarFuelTypeId = (byte)4,
                            ImageName = "Insignia.png",
                            Model = "Insignia",
                            NumberOfSeats = 7,
                            RentPrice = (short)180
                        },
                        new
                        {
                            Id = (short)8,
                            Brand = "Suzuki ",
                            CarCategoryId = (byte)5,
                            CarClassId = (byte)6,
                            CarFuelTypeId = (byte)4,
                            ImageName = "Cross.png",
                            Model = "SX4 S-Cross",
                            NumberOfSeats = 7,
                            RentPrice = (short)170
                        });
                });

            modelBuilder.Entity("CarRent.Models.CarModels.CarCategory", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarCategories");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Small"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Family"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Premium"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("CarRent.Models.CarModels.CarClass", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClasses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "A"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "B"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "C"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "D"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "E"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "M"
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "P"
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "R"
                        });
                });

            modelBuilder.Entity("CarRent.Models.CarModels.CarFuelType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarFuelTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "EV"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "PB"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "ON"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "PB/ON"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "PB/LPG"
                        });
                });

            modelBuilder.Entity("CarRent.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CarRent.Models.Rental", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CarId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RentDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte>("RentalStatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ReturnDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("RentalStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRent.Models.RentalStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentalStatus");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Status = "Reservation"
                        },
                        new
                        {
                            Id = (byte)2,
                            Status = "Checked"
                        },
                        new
                        {
                            Id = (byte)3,
                            Status = "Archival"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarRent.Models.CarModels.Car", b =>
                {
                    b.HasOne("CarRent.Models.CarModels.CarCategory", "CarCategory")
                        .WithMany()
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRent.Models.CarModels.CarClass", "CarClass")
                        .WithMany()
                        .HasForeignKey("CarClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRent.Models.CarModels.CarFuelType", "CarFuelType")
                        .WithMany()
                        .HasForeignKey("CarFuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRent.Models.Rental", b =>
                {
                    b.HasOne("CarRent.Models.CarModels.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRent.Models.RentalStatus", "RentalStatus")
                        .WithMany()
                        .HasForeignKey("RentalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRent.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRent.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRent.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRent.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRent.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
